# Check raster
nightlights.raster.processed
# Compare to base layer
base.layer.raster
# Plot raster
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50))
# Create a high quality image
png(filename="maps/nightlights_BGD.png", res=400, width=2000, height=1500)
plot(nightlights.raster.processed, box=F, axes=F, main = "Nightlights data in Bangladesh", col=cividis(50))
dev.off()
# First create a colour palette - let's go with viridis, and supply the values of our raster into domain
pal2 <- leaflet::colorNumeric(cividis_pal(2), domain = values(nightlights.raster.processed), na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity (radiance per pixel)")
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
pal2 <- leaflet::colorNumeric(cividis_pal(10), domain = values(nightlights.raster.processed), na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
pal2 <- leaflet::colorNumeric(magma_pal(10), domain = values(nightlights.raster.processed), na.color = "transparent")
show_col(cividis_pal()(10))
library("scales")
show_col(cividis_pal()(10))
pal2 <- leaflet::colorNumeric(cividis_pal(10), domain = values(nightlights.raster.processed), na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
show_col(cividis_pal()(10))
show_col(cividis_pal()(2))
pal2 <- leaflet::colorNumeric(cividis_pal(3), domain = values(nightlights.raster.processed), na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
display.brewer.pal(n = 8, name = 'YlGnBu')
display.brewer.pal(rev(n = 8, name = 'YlGnBu'))
display.brewer.pal(n = 8, name = 'YlGnBu')
brewer.pal(n = 8, name = "YlOrRd")
brewer.pal(n = 8, name = 'YlGnBu')
pal2 <- colorNumeric(c("#0C2C84", "#225EA8" , "#1D91C0", "#41B6C4", "#7FCDBB", "#C7E9B4", "#EDF8B1", "#FFFFD9"), values(nightlights.raster.processed),
na.color = "transparent")
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
brewer.pal(n = 10, name = 'YlGnBu')
brewer.pal(n = 9, name = 'YlGnBu')
display.brewer.pal(n = 9, name = 'YlGnBu')
brewer.pal(n = 9, name = 'YlGnBu')
pal2 <- colorNumeric(c("#081D58", "#225EA8" , "#1D91C0", "#41B6C4", "#7FCDBB", "#C7E9B4", "#EDF8B1", "#FFFFD9"), values(nightlights.raster.processed),
na.color = "transparent")
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
display.brewer.pal(n = 9, name = 'RdGy')
display.brewer.pal(n = 10, name = 'RdGy')
brewer.pal(n = 10, name = 'RdGy')
pal2 <- colorNumeric(c("#1A1A1A", "#225EA8" , "#1D91C0", "#41B6C4", "#7FCDBB", "#C7E9B4", "#EDF8B1", "#FFFFD9"), values(nightlights.raster.processed),
na.color = "transparent")
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
display.brewer.pal(n = 10, name = 'YlOrRd')
brewer.pal(n = 10, name = 'YlOrRd')
brewer.pal(n = 9, name = 'YlOrRd')
display.brewer.pal(n = 9, name = 'YlOrRd')
# Hexadecimal color specification
brewer.pal(n = 9, name = 'YlOrRd')
pal2 <- colorNumeric(c("#1A1A1A", "#800026" , "#BD0026", "#E31A1C" , "#FC4E2A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster.processed),
na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
# Set colour palette
pal2 <- colorNumeric(c("#1A1A1A", "#FC4E2A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster.processed),
na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
# Set colour palette
pal2 <- colorNumeric(c("#1A1A1A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster.processed),
na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1, project = FALSE)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=pal2)
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=pal2)
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=col=magma(50))
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=magma(50))
# Let's have a look
map_night
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", ccol=cividis(50))
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50))
View(nightlights.raster.processed)
# Apply the geo processing function
nightlights.raster.processed <- geo_process(aux.raster = nightlights.raster, base.raster = base.layer.raster, label = "Nightlights_data", value = 0)
# Check raster
nightlights.raster.processed
# Compare to base layer
base.layer.raster
# Plot raster
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50))
# Create a high quality image
png(filename="maps/nightlights_BGD.png", res=400, width=2000, height=1500)
plot(nightlights.raster.processed, box=F, axes=F, main = "Nightlights data in Bangladesh", col=cividis(50))
dev.off()
# First create a colour palette - let's go with viridis, and supply the values of our raster into domain
display.brewer.pal(n = 9, name = 'YlOrRd')
# Hexadecimal color specification
brewer.pal(n = 9, name = 'YlOrRd')
# Set colour palette
pal2 <- colorNumeric(c("#1A1A1A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster.processed),
na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=1)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
worldpop.rasters
base.layer.raster
worldpop.rasters
plot(worldpop.rasters[[11]], box = F, axes = F, main = "Distance to the closest road Bangladesh", col=viridis(50))
pal3 <- leaflet::colorNumeric(viridis_pal(option = "C")(2), domain = values(worldpop.rasters[[11]]), na.color = "transparent")
# Create an interactive leaflet map
map_dst_road <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(worldpop.rasters[[11]],  colors = pal3, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal3, values = values(worldpop.rasters[[11]]), title = "Distance to the closest road Bangladesh")
plot(worldpop.rasters[[11]], box = F, axes = F, main = "Distance to the closest road Bangladesh", col=viridis(50))
# Copy admin unit codes to new column in upazila shapefile attributes, in the process removing Bangladesh prefix from the integer code
shapefile.zonal@data$adm3_integer <- substr(shapefile.zonal@data[["ADM3_PCODE"]], 3, 10)
# Turn into numeric
shapefile.zonal@data[["adm3_integer"]] <- as.numeric(shapefile.zonal@data[["adm3_integer"]])
# Convert upazila shapefile to raster using the integer admin unit code, maintaining extent and cell size of L0 base layer
## Set up a raster "template" to use in rasterize()
ext_base <-  extent(base.layer.raster)
ncol_base <- base.layer.raster@ncols
nrow_base <- base.layer.raster@nrows
xy <- abs(apply(as.matrix(bbox(ext_base)), 1, diff))
r <- raster(ext_base, ncol=ncol_base, nrow=nrow_base)
## Rasterize the shapefile
raster_admin3 <-rasterize(shapefile.zonal, r, field=shapefile.zonal$adm3_integer)
# Assign the same CRS as the base layer
crs_base <- crs(base.layer.raster)
crs(raster_admin3) <- crs_base
# Plot to see if values have been assigned to the raster
plot(raster_admin3, box=F, axes=F, legend=F)
View(shapefile.zonal)
shapefile.zonal@data[["ADM3_PCODE"]]
plot(raster_admin3, box=F, axes=F, legend=F)
# Make a list with all the rasters
full.raster.list <- c(matlas.processed, fblist.processed, worldpop.rasters, nightlights.raster.processed)
# Check rasters
full.raster.list
# Create a raster stack
raster.stack <- stack(full.raster.list)
# Zonal statistics
# Mean
zonal.stats.mean <- zonal(raster.stack, raster_admin3, fun='mean', digits=6, na.rm=TRUE)
#| echo: true
#| output: false
library("tiff")           # opening geoTIFF files
library("raster")         # raster manipulation
library("sf")             # Simple Features vector data
library("ggplot2")        # plots
library("RColorBrewer")   # funky graph colors
library("haven")          # opening stata files
library("gsubfn")         # string operations
library("viridis")        # colour palette for data visualisations
library("rgdal")          # RGDAL functions
library("sp")             # Spatial Points vector data
library("plyr")           # Data wrangling
library("dplyr")          # Data wrangling
library("readr")          # read rectangular data
library("leaflet")        # Interactive maps
library("htmlwidgets")    # HTML widgets
library("scales")
#| echo: true
#| output: false
# Set working directory - this is the base folder where we keep all the sub-folders with geo-spatial data organised by source.
setwd("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/")
# 1. Base layer #
# Load the WordPop Administrative Level 0 mastergrid base layer for Bangladesh
base.layer <- 'Base layers/bgd_level0_100m_2000_2020.tif'
base.layer.raster=raster(base.layer)
# 2. Shapefile with boundaries of zones #
# Load the Shapefile with administrative level 3 (upazila in Bangladesh)
shapefile.zonal <- readOGR("Base layers/admin 3 level/bgd_admbnda_adm3_bbs_20201113.shp")
# Load the shapefile in a format that's nicer for plotting
shapefile.zone.plot <- st_read("Base layers/admin 3 level/bgd_admbnda_adm3_bbs_20201113.shp")
# 3. Malaria Atlas accessibility datasets #
#Make a list of all TIFF files from the Malaria Atlas Project and import those into a list
matlas.list <- list.files(path="Travel time - Malaria Atlas Project", pattern =".tiff", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
matlas.rasters <- lapply(matlas.list, raster)
# 4. Demographic maps from Meta #
# Pull all TIFF files from Meta with demographic maps
fb.list <- list.files(path="Demographic maps Facebook/", pattern =".tif", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
fb.rasters <- lapply(fb.list, raster)
# 5. Nightlights Data #
# Import geoTIFF file on nightlights intensity
nightlights <- 'Nightlights data/SVDNB_npp_20150101-20151231_75N060E_vcm-orm_v10_c201701311200.avg_rade9.tif'
# Turn into a raster
nightlights.raster = raster(nightlights)
# 6. Pre-harmonised World Pop datasets #
# Make a list of all TIFF files from WorldPop and import those into a list
worldpop.list <- list.files(path="World Pop Harmonised Datasets", pattern =".tif", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
worldpop.rasters <- lapply(worldpop.list, raster)
# Check attributes associated with the base layer
base.layer.raster
# Plot raster
plot(base.layer.raster, box=F, axes=F,legend=F, main = "Bangladesh base layer")
# Inspect the sf multipolygon object with admin 3 boundaries
shapefile.zone.plot
# Inspect the sp SpatialPolygonsDataFrame object with admin 3 boundaries
shapefile.zonal
# Plot the shape file - this shows the zones for which we will estimate poverty
ggplot() +
geom_sf(data = shapefile.zone.plot, size = 3, color = "black", fill = "cyan1") +
ggtitle("Administrative Level 3 Bangladesh") +
coord_sf() + theme_minimal()
View(shapefile.zonal)
View(shapefile.zone.plot)
View(shapefile.zone.plot[[17]][[1]])
# Function for automating the processing of geo-spatial covariates for use in poverty modelling
geo_process <- function(aux.raster, base.raster, label, value) {
# 1. Crop to the base layer so they have the same extent
r <- crop(aux.raster, base.raster)
# 2. Change resolution to the resolution of the base layer using nearest neighbour interpolation
r <- resample(r, base.raster, method = "ngb")
# 3. Replace NA with a specified value (if appropriate)
r[is.na(r[])] <- value
# 4. Select only the shape of Bangladesh as defined by the base layer
r <- mask(x = r, mask = base.raster)
# Assign a name to the raster
names(r) <- label
return(r)
}
# Function for automating the processing of geo-spatial covariates for use in poverty modelling
geo_process2 <- function(aux.raster, base.raster, label, value) {
# 1. Get spatial resolutions of both rasters
res1 <- res(base.raster)
res2 <- res(aux.raster)
# Save as a factor of ratios
factor.ratio <- res1/res2
factor.ratio <- factor.ratio[[1]]
# 2. Crop to the base layer so they have the same extent
r <- crop(aux.raster, base.raster)
# 3. Replace NA with a specified value (if appropriate)
r[is.na(r[])] <- value
# 4. Change resolution to the resolution of the base layer using the "sum"        algorithm
r <- aggregate(r, fact=factor.ratio, fun=sum, na.rm=TRUE)
# 5. Select only the shape of Bangladesh as defined by the base layer
r <- mask(x = r, mask = base.raster)
# Assign a name to the raster
names(r) <- label
return(r)
}
# See that all the files have loaded
matlas.rasters
# Now apply this function to a list of rasters from the Malaria Atlas
# Make a list for storing the processed rasters
matlas.processed <- list()
# Store the length of the list of rasters
num_r <- 1:length(matlas.rasters)
# Apply the geo-processing function to all rasters. Here there is no need to replace missing values as 0s (they are already coded as missing), so the parameter for value can stay at NA.
for (i in num_r) {
matlas.processed[[i]] <- geo_process(aux.raster = matlas.rasters[[i]], base.raster = base.layer.raster, label = matlas.rasters[[i]]@data@names, value = NA)
}
# See the result
matlas.processed
# Compare to base layer
base.layer.raster
# Three ways of visualising our data:
## 1. Simple plot ##
# Plot results - with no bounding box or axes, using the viridis colour palette, and adding a main plot title
plot(matlas.processed[[1]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Travel Time to Cities")
plot(matlas.processed[[2]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Motorised Travel Time to Healthcare Facilities")
plot(matlas.processed[[3]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Walking-Only Travel Time to Healthcare Facilities")
## 2. A high-quality plot image ##
# Create a high quality image - manually changing the resolution of base R plots
png(filename="maps/BGD travel time city.png", res=400, width=2000, height=1500)
plot(matlas.processed[[1]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Travel Time to Cities")
dev.off()
## 3. An interactive html widget ##
# First create a colour palette - let's go with viridis, and supply the values of our raster into domain
pal <- leaflet::colorNumeric(viridis_pal(option = "C")(2), domain = values(matlas.processed[[1]]), na.color = "transparent")
# Create an interactive leaflet map
map_access <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(matlas.processed[[1]],  colors = pal, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal, values = values(matlas.processed[[1]]), title = "Travel Time to Cities in Minutes")
# Let's have a look
map_access
# Save map as widget
saveWidget(map_access, file="html widgets/BGD_access_map.html")
# Check that all the files were picked up by this
fb.rasters
# Make a list for storing the processed rasters
fblist.processed <- list()
# Store the length of the list of rasters
num_fb <- 1:length(fb.rasters)
# Apply the geo-processing function to all rasters. Here we need to recode missing values as 0s
for (i in num_fb) {
fblist.processed[[i]] <- geo_process2(aux.raster = fb.rasters[[i]], base.raster = base.layer.raster, label = fb.rasters[[i]]@data@names, value = 0)
}
# See the result
fblist.processed
# Compare to base layer
base.layer.raster
# Plot results
plot(fblist.processed[[1]], box=F, axes=F, main = "Bangladesh - Population density (children under 5)")
plot(fblist.processed[[2]], box=F, axes=F, main = "Bangladesh - Population density (elderly 60+)")
plot(fblist.processed[[3]], box=F, axes=F, main = "Bangladesh - Population density (general)")
plot(fblist.processed[[4]], box=F, axes=F, main = "Bangladesh - Population density (men)")
plot(fblist.processed[[5]], box=F, axes=F, main = "Bangladesh - Population density (women)")
plot(fblist.processed[[6]], box=F, axes=F, main = "Bangladesh - Population density (women of reproductive age 15-49)")
plot(fblist.processed[[7]], box=F, axes=F, main = "Bangladesh - Population density (youth 15-24)")
# Create a high quality image
png(filename="maps/BGD_pop_density_youth.png", res=400, width=2000, height=1500)
plot(fblist.processed[[7]], box=F, axes=F, main = "Bangladesh - Population density (youth 15-24)")
dev.off()
# Apply the geo processing function
nightlights.raster.processed <- geo_process(aux.raster = nightlights.raster, base.raster = base.layer.raster, label = "Nightlights_data", value = 0)
# Check raster
nightlights.raster.processed
# Compare to base layer
base.layer.raster
# Plot raster
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50))
# Create a high quality image
png(filename="maps/nightlights_BGD.png", res=400, width=2000, height=1500)
plot(nightlights.raster.processed, box=F, axes=F, main = "Nightlights data in Bangladesh", col=cividis(50))
dev.off()
# Create a colour palette
# View colours from the YlOrRd palette
display.brewer.pal(n = 9, name = 'YlOrRd')
# Hexadecimal color specification
brewer.pal(n = 9, name = 'YlOrRd')
# Set colour palette
pal2 <- colorNumeric(c("#1A1A1A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster.processed),
na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
# See that all the files have loaded
worldpop.rasters
# Check they match the base layer
base.layer.raster
#Plot examples of WorldPop datasets
plot(worldpop.rasters[[11]], box = F, axes = F, main = "Distance to the closest road Bangladesh", col=viridis(50))
# Copy admin unit codes to new column in upazila shapefile attributes, in the process removing Bangladesh prefix from the integer code
shapefile.zonal@data$adm3_integer <- substr(shapefile.zonal@data[["ADM3_PCODE"]], 3, 10)
# Turn into numeric
shapefile.zonal@data[["adm3_integer"]] <- as.numeric(shapefile.zonal@data[["adm3_integer"]])
# Convert upazila shapefile to raster using the integer admin unit code, maintaining extent and cell size of L0 base layer
## Set up a raster "template" to use in rasterize()
ext_base <-  extent(base.layer.raster)
ncol_base <- base.layer.raster@ncols
nrow_base <- base.layer.raster@nrows
xy <- abs(apply(as.matrix(bbox(ext_base)), 1, diff))
r <- raster(ext_base, ncol=ncol_base, nrow=nrow_base)
## Rasterize the shapefile
raster_admin3 <-rasterize(shapefile.zonal, r, field=shapefile.zonal$adm3_integer)
# Assign the same CRS as the base layer
crs_base <- crs(base.layer.raster)
crs(raster_admin3) <- crs_base
# Plot to see if values have been assigned to the raster
plot(raster_admin3, box=F, axes=F, legend=F)
# Make a list with all the rasters
full.raster.list <- c(matlas.processed, fblist.processed, worldpop.rasters, nightlights.raster.processed)
# Check rasters
full.raster.list
# Create a raster stack
raster.stack <- stack(full.raster.list)
# Zonal statistics
# Mean
zonal.stats.mean <- zonal(raster.stack, raster_admin3, fun='mean', digits=6, na.rm=TRUE)
zonal.stats.mean <- as.data.frame(zonal.stats.mean)
colnames_mean <- colnames(zonal.stats.mean)  # gather column names
colnames_mean <- paste(colnames_mean, "mean", sep="_")  # add identifier for mean
colnames_mean <- colnames_mean[2:28]  # exclude zone
colnames(zonal.stats.mean)[2:28] <- colnames_mean  # rename columns
# Min
zonal.stats.min <- zonal(raster.stack, raster_admin3, fun='min', digits=6, na.rm=TRUE)
zonal.stats.min <- as.data.frame(zonal.stats.min)
colnames_min <- colnames(zonal.stats.min)
colnames_min <- paste(colnames_min, "min", sep="_")
colnames(zonal.stats.min)[2:28] <- colnames_min[2:28]
# Max
zonal.stats.max <- zonal(raster.stack, raster_admin3, fun='max', digits=6, na.rm=TRUE)
zonal.stats.max <- as.data.frame(zonal.stats.max)
colnames_max <- colnames(zonal.stats.max)
colnames_max <- paste(colnames_max, "max", sep="_")
colnames(zonal.stats.max)[2:28] <- colnames_max[2:28]
# Sum
zonal.stats.sum <- zonal(raster.stack, raster_admin3, fun='sum', digits=6, na.rm=TRUE)
zonal.stats.sum <- as.data.frame(zonal.stats.sum)
colnames_sum <- colnames(zonal.stats.sum)
colnames_sum <- paste(colnames_sum, "sum", sep="_")
colnames(zonal.stats.sum)[2:28] <- colnames_sum[2:28]
# SD (standard deviation)
zonal.stats.sd <- zonal(raster.stack, raster_admin3, fun='sd', digits=6, na.rm=TRUE)
zonal.stats.sd <- as.data.frame(zonal.stats.sd)
colnames_sd <- colnames(zonal.stats.sd)
colnames_sd <- paste(colnames_sd, "sd", sep="_")
colnames(zonal.stats.sd)[2:28] <- colnames_sd[2:28]
# Count (number of observations)
zonal.stats.count <- zonal(raster.stack, raster_admin3, fun='count', digits=6, na.rm=TRUE)
zonal.stats.count <- as.data.frame(zonal.stats.count)
colnames_count <- colnames(zonal.stats.count)
colnames_count <- paste(colnames_count, "count", sep="_")
colnames(zonal.stats.count)[2:28] <- colnames_count[2:28]
# Make a list of all dataframes that contain zonal statistics
l.df <- lapply(ls(pattern="zonal.stats"), function(x) get(x))
# Combine all zonal statistics into one data frame
zonal.stats.all <- bind_cols(l.df)
# Delete repeated columns for zones - occurs every 28 variables
zonal.stats.all = subset(zonal.stats.all, select = -c(29, 57, 85, 113, 141))
# Rename the colum with upazila codes
colnames(zonal.stats.all)[1] <- "upazila.code"
# Save file
save(zonal.stats.all, file = "C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/BGD.zonalstats.RData")
View(shapefile.zonal)
View(shapefile.zone.plot)
upazila <- cbind(raster.stack, exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count')))
install.packages("exactextractr")
version
install.packages("exactextractr")
library("exactextractr")
upazila <- cbind(raster.stack, exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count')))
version
library(sp)
getClass("Spatial")
library(raster)
r <- raster(ncol=10, nrow = 10, xmx=-116,xmn=-126,ymn=42,ymx=46)
r
r[] <- runif(n=ncell(r))
r
plot(r)
