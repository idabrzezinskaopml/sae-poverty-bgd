r[] <- runif(n=ncell(r))
r
plot(r)
>>>>>>> 445eb820e415c327b317069f3174138be95b4523
#| echo: true
#| output: false
library("tiff")           # opening geoTIFF files
library("raster")         # raster manipulation
library("sf")             # Simple Features vector data
library("ggplot2")        # plots
library("RColorBrewer")   # funky graph colors
library("haven")          # opening stata files
library("gsubfn")         # string operations
library("viridis")        # colour palette for data visualisations
library("rgdal")          # RGDAL functions
library("sp")             # Spatial Points vector data
library("plyr")           # Data wrangling
library("dplyr")          # Data wrangling
library("readr")          # read rectangular data
library("leaflet")        # Interactive maps
library("htmlwidgets")    # HTML widgets
library("scales")
library("exactextractr")
#| echo: true
#| output: false
# Set working directory - this is the base folder where we keep all the sub-folders with geo-spatial data organised by source.
setwd("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/")
# 1. Base layer #
# Load the WordPop Administrative Level 0 mastergrid base layer for Bangladesh
base.layer <- 'Base layers/bgd_level0_100m_2000_2020.tif'
base.layer.raster=raster(base.layer)
# 2. Shapefile with boundaries of zones #
# Load the Shapefile with administrative level 3 (upazila in Bangladesh)
shapefile.zonal <- readOGR("Base layers/admin 3 level/bgd_admbnda_adm3_bbs_20201113.shp")
# Load the shapefile in a format that's nicer for plotting
shapefile.zone.plot <- st_read("Base layers/admin 3 level/bgd_admbnda_adm3_bbs_20201113.shp")
# 3. Malaria Atlas accessibility datasets #
#Make a list of all TIFF files from the Malaria Atlas Project and import those into a list
matlas.list <- list.files(path="Travel time - Malaria Atlas Project", pattern =".tiff", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
matlas.rasters <- lapply(matlas.list, raster)
# 4. Demographic maps from Meta #
# Pull all TIFF files from Meta with demographic maps
fb.list <- list.files(path="Demographic maps Facebook/", pattern =".tif", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
fb.rasters <- lapply(fb.list, raster)
# 5. Nightlights Data #
# Import geoTIFF file on nightlights intensity
nightlights <- 'Nightlights data/SVDNB_npp_20150101-20151231_75N060E_vcm-orm_v10_c201701311200.avg_rade9.tif'
# Turn into a raster
nightlights.raster = raster(nightlights)
# 6. Pre-harmonised World Pop datasets #
# Make a list of all TIFF files from WorldPop and import those into a list
worldpop.list <- list.files(path="World Pop Harmonised Datasets", pattern =".tif", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
worldpop.rasters <- lapply(worldpop.list, raster)
# Check attributes associated with the base layer
base.layer.raster
# Plot raster
plot(base.layer.raster, box=F, axes=F,legend=F, main = "Bangladesh base layer")
# Inspect the sf multipolygon object with admin 3 boundaries
shapefile.zone.plot
# Inspect the sp SpatialPolygonsDataFrame object with admin 3 boundaries
shapefile.zonal
# Plot the shape file - this shows the zones for which we will estimate poverty
ggplot() +
geom_sf(data = shapefile.zone.plot, size = 3, color = "black", fill = "cyan1") +
ggtitle("Administrative Level 3 Bangladesh") +
coord_sf() + theme_minimal()
# Function for automating the processing of geo-spatial covariates for use in poverty modelling
geo_process <- function(aux.raster, base.raster, label, value) {
# 1. Crop to the base layer so they have the same extent
r <- crop(aux.raster, base.raster)
# 2. Change resolution to the resolution of the base layer using nearest neighbour interpolation
r <- resample(r, base.raster, method = "ngb")
# 3. Replace NA with a specified value (if appropriate)
r[is.na(r[])] <- value
# 4. Select only the shape of Bangladesh as defined by the base layer
r <- mask(x = r, mask = base.raster)
# Assign a name to the raster
names(r) <- label
return(r)
}
# Function for automating the processing of geo-spatial covariates for use in poverty modelling
geo_process2 <- function(aux.raster, base.raster, label, value) {
# 1. Get spatial resolutions of both rasters
res1 <- res(base.raster)
res2 <- res(aux.raster)
# Save as a factor of ratios
factor.ratio <- res1/res2
factor.ratio <- factor.ratio[[1]]
# 2. Crop to the base layer so they have the same extent
r <- crop(aux.raster, base.raster)
# 3. Replace NA with a specified value (if appropriate)
r[is.na(r[])] <- value
# 4. Change resolution to the resolution of the base layer using the "sum"        algorithm
r <- aggregate(r, fact=factor.ratio, fun=sum, na.rm=TRUE)
# 5. Select only the shape of Bangladesh as defined by the base layer
r <- mask(x = r, mask = base.raster)
# Assign a name to the raster
names(r) <- label
return(r)
}
# See that all the files have loaded
matlas.rasters
# Now apply this function to a list of rasters from the Malaria Atlas
# Make a list for storing the processed rasters
matlas.processed <- list()
# Store the length of the list of rasters
num_r <- 1:length(matlas.rasters)
# Apply the geo-processing function to all rasters. Here there is no need to replace missing values as 0s (they are already coded as missing), so the parameter for value can stay at NA.
for (i in num_r) {
matlas.processed[[i]] <- geo_process(aux.raster = matlas.rasters[[i]], base.raster = base.layer.raster, label = matlas.rasters[[i]]@data@names, value = NA)
}
# See the result
matlas.processed
# Compare to base layer
base.layer.raster
# Three ways of visualising our data:
## 1. Simple plot ##
version
# Plot results - with no bounding box or axes, using the viridis colour palette, and adding a main plot title
plot(matlas.processed[[1]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Travel Time to Cities")
plot(matlas.processed[[2]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Motorised Travel Time to Healthcare Facilities")
plot(matlas.processed[[3]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Walking-Only Travel Time to Healthcare Facilities")
## 2. A high-quality plot image ##
# Create a high quality image - manually changing the resolution of base R plots
png(filename="maps/BGD travel time city.png", res=400, width=2000, height=1500)
plot(matlas.processed[[1]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Travel Time to Cities")
dev.off()
## 3. An interactive html widget ##
# First create a colour palette - let's go with viridis, and supply the values of our raster into domain
pal <- leaflet::colorNumeric(viridis_pal(option = "C")(2), domain = values(matlas.processed[[1]]), na.color = "transparent")
# Create an interactive leaflet map
map_access <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(matlas.processed[[1]],  colors = pal, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal, values = values(matlas.processed[[1]]), title = "Travel Time to Cities in Minutes")
# Let's have a look
map_access
# Save map as widget
saveWidget(map_access, file="html widgets/BGD_access_map.html")
# Check that all the files were picked up by this
fb.rasters
# Make a list for storing the processed rasters
fblist.processed <- list()
# Store the length of the list of rasters
num_fb <- 1:length(fb.rasters)
# Apply the geo-processing function to all rasters. Here we need to recode missing values as 0s
for (i in num_fb) {
fblist.processed[[i]] <- geo_process2(aux.raster = fb.rasters[[i]], base.raster = base.layer.raster, label = fb.rasters[[i]]@data@names, value = 0)
}
# Check that all the files were picked up by this
fb.rasters
# Make a list for storing the processed rasters
fblist.processed <- list()
# Store the length of the list of rasters
num_fb <- 1:length(fb.rasters)
# Apply the geo-processing function to all rasters. Here we need to recode missing values as 0s
for (i in num_fb) {
fblist.processed[[i]] <- geo_process2(aux.raster = fb.rasters[[i]], base.raster = base.layer.raster, label = fb.rasters[[i]]@data@names, value = 0)
}
rm(list=ls())
load("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/Quarto github workspace.RData")
View(zonal.stats.all)
upazila <- exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count'), stack_apply=TRUE)
View(upazila)
View(shapefile.zone.plot)
colnames(upazila)
summary(upazila$min.X201501_Global_Travel_Time_to_Cities_BGD)
load("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/Z all other files/Harmonised data Nikos/final.cov.est.new.Rdata")
View(final.cov.est)
colnames(final.cov.est)
summary(upazila$min.X201501_Global_Travel_Time_to_Cities_BGD)
summary(final.cov.est$CCCITY.MIN)
summary(upazila$min.X201501_Global_Travel_Time_to_Cities_BGD)
summary(final.cov.est$ACCCITY.MIN)
colnames(zonal.stats.all)
summary(zonal.stats.all$X201501_Global_Travel_Time_to_Cities_BGD_min)
summary(upazila$min.X201501_Global_Travel_Time_to_Cities_BGD)
summary(final.cov.est$ACCCITY.MIN)
summary(zonal.stats.all$X201501_Global_Travel_Time_to_Cities_BGD_min)
colnames(upazila)
colnames(upazila)
summary(upazila$max.osm_dst_road_100m_2016_BGD)
colnames(final.cov.est)
summary(upazila$max.osm_dst_road_100m_2016_BGD)
summary(final.cov.est$DSTROAD.MAX)
colnames(zonal.stats.all)
summary(upazila$max.osm_dst_road_100m_2016_BGD)
summary(final.cov.est$DSTROAD.MAX)
summary(zonal.stats.all$osm_dst_road_100m_2016_BGD_max)
colnames(upazila)
summary(upazila$msum.bgd_women_2020)
summary(upazila$sum.bgd_women_2020)
colnames(final.cov.est)
summary(upazila$sum.bgd_women_2020)
summary(final.cov.est$WOMEN.SUM)
colnames(zonal.stats.all)
summary(upazila$sum.bgd_women_2020)
summary(final.cov.est$WOMEN.SUM)
summary(zonal.stats.all$bgd_women_2020_sum)
save(upazila, file = "C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/BGD.zonalstats.exactextract.RData")
View(upazila)
View(upazila)
View(shapefile.zone.plot)
upazila <- exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count'), stack_apply=TRUE, include_cols="ADM3_PCODE")
upazila <- exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count'), stack_apply=TRUE, append_cols="ADM3_PCODE")
save(upazila, file = "C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/BGD.zonalstats.exactextract.RData")
rm(list=ls)
rm(list=ls())
load("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/BGD.zonalstats.exactextract.RData")
View(upazila)
load("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/Quarto github workspace.RData")
upazila <- exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count'), stack_apply=TRUE, append_cols="ADM3_PCODE")
load("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/Quarto github workspace update.RData")
#| echo: true
#| output: false
library("tiff")           # opening geoTIFF files
library("raster")         # raster manipulation
library("sf")             # Simple Features vector data
library("ggplot2")        # plots
library("RColorBrewer")   # funky graph colors
library("haven")          # opening stata files
library("gsubfn")         # string operations
library("viridis")        # colour palette for data visualisations
library("rgdal")          # RGDAL functions
library("sp")             # Spatial Points vector data
library("plyr")           # Data wrangling
library("dplyr")          # Data wrangling
library("readr")          # read rectangular data
library("leaflet")        # Interactive maps
library("htmlwidgets")    # HTML widgets
library("scales")
library("exactextractr")
# Three ways of visualising our data:
## 1. Simple plot ##
version
# Plot results - with no bounding box or axes, using the viridis colour palette, and adding a main plot title
plot(matlas.processed[[1]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Travel Time to Cities")
plot(matlas.processed[[2]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Motorised Travel Time to Healthcare Facilities")
plot(matlas.processed[[3]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Walking-Only Travel Time to Healthcare Facilities")
## 2. A high-quality plot image ##
# Create a high quality image - manually changing the resolution of base R plots
png(filename="maps/BGD travel time city.png", res=400, width=2000, height=1500)
plot(matlas.processed[[1]], box=F, axes=F, col=viridis(50), main = "Bangladesh - Travel Time to Cities")
dev.off()
## 3. An interactive html widget ##
# First create a colour palette - let's go with viridis, and supply the values of our raster into domain
pal <- leaflet::colorNumeric(viridis_pal(option = "C")(2), domain = values(matlas.processed[[1]]), na.color = "transparent")
# Create an interactive leaflet map
map_access <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(matlas.processed[[1]],  colors = pal, opacity=0.9, project = FALSE)%>%
addLegend(pal = pal, values = values(matlas.processed[[1]]), title = "Travel Time to Cities in Minutes")
# Let's have a look
map_access
# Save map as widget
saveWidget(map_access, file="html widgets/BGD_access_map.html")
plot(nightlights.raster, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50))
extent(nightlights.raster)
worldmap <- getMap(resolution = "coarse")
library("rworldmap")                # Mapping country boundaries
# Trial visualisation with leaflet for the processing of the nighlights raster
# Start with a completely unprocessed raster
worldmap <- getMap(resolution = "coarse")
# plot world map
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(57, 180), ylim = c(0, 75),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot(nightlights.raster, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50), alpha=0.8, add=T)
extent(nightlights.raster)
test.nighlights.r <- crop(nightlights.raster, base.layer.raster)
extent(test.nightlights.r)
extent( test.nighlights.r)
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(88, 93), ylim = c(20, 37),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot( test.nighlights.r, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50), alpha=0.8, add=T)
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(88, 93), ylim = c(20, 37),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
worldmap <- getMap(resolution = "coarse")
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(88, 93), ylim = c(20, 37),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(88.25, 93.25), ylim = c(20.25, 37.25),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(90, 93.25), ylim = c(20.25, 37.25),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(90, 93.25), ylim = c(20.25, 37.25),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(0,180))
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(90, 93.25), ylim = c(20.25, 37.25),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(0,95))
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(36.25, 41.75), ylim = c(11.50, 15.25),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
extent( test.nighlights.r)
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(80, 95), ylim = c(20, 27),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(85, 95), ylim = c(20, 27),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot( test.nighlights.r, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50), alpha=0.8, add=T)
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(87, 92), ylim = c(20, 27),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot( test.nighlights.r, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50), alpha=0.8, add=T)
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(87, 90), ylim = c(20, 27),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot( test.nighlights.r, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50), alpha=0.8, add=T)
pal2 <- colorNumeric(c("#1A1A1A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster),
na.color = "transparent")
plot(nightlights.raster, axes=F, box=F, main = "Nightlights data in Bangladesh", col=pal2, alpha=0.8, add=T)
pal <- leaflet::colorNumeric(cividis_pal(option = "C")(2), domain = values(test.nighlights.r), na.color = "transparent")
library ("cividis")
pal <- leaflet::colorNumeric(cividis_pal(option = "C")(2), domain = values(test.nighlights.r), na.color = "transparent")
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage( test.nighlights.r,  colors = pal, opacity=0.9)%>%
addLegend(pal = pal2, values = values( test.nighlights.r), title = "Nightlights intensity")
map_night
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage( test.nighlights.r,  colors = pal, opacity=0.9)%>%
addLegend(pal = pal, values = values( test.nighlights.r), title = "Nightlights intensity")
# Let's have a look
map_night
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage( test.nighlights.r,  colors = pal, opacity=0.7)%>%
addLegend(pal = pal, values = values( test.nighlights.r), title = "Nightlights intensity")
# Let's have a look
map_night
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage( test.nighlights.r,  colors = pal, opacity=0.8)%>%
addLegend(pal = pal, values = values( test.nighlights.r), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
nightlights.resampled <- resample(test.nighlights.r, base.layer.raster, method = "ngb")
pal <- leaflet::colorNumeric(cividis_pal(option = "C")(2), domain = values(nightlights.resampled), na.color = "transparent")
# Create an interactive leaflet map
map_night2 <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.resampled,  colors = pal, opacity=0.8)%>%
addLegend(pal = pal, values = values(nightlights.resampled), title = "Nightlights intensity")
# Let's have a look
map_night2
# Save map as widget
saveWidget(map_night2, file="html widgets/BGD_nightlights.html")
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
# Save map as widget
saveWidget(map_night2, file="html widgets/BGD_nightlights2.html")
nightlights.masked <- mask(x = nightlights.resampled, mask = base.layer.raster)
plot(worldmap, col = "lightgray",
fill = T, border = "black",
xlim = c(87, 90), ylim = c(20, 27),
bg = "white",
main = "Nightlights data",
asp = 1, wrap=c(-180,180))
plot(nightlights.masked, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50), alpha=0.8, add=T)
# Apply the geo processing function
nightlights.raster.processed <- geo_process(aux.raster = nightlights.raster, base.raster = base.layer.raster, label = "Nightlights_data", value = 0)
# Check raster
nightlights.raster.processed
# Compare to base layer
base.layer.raster
# Plot raster
plot(nightlights.raster.processed, axes=F, box=F, main = "Nightlights data in Bangladesh", col=cividis(50))
# Create a high quality image
png(filename="maps/nightlights_BGD.png", res=400, width=2000, height=1500)
plot(nightlights.raster.processed, box=F, axes=F, main = "Nightlights data in Bangladesh", col=cividis(50))
dev.off()
# Create a colour palette
# View colours from the YlOrRd palette
display.brewer.pal(n = 9, name = 'YlOrRd')
# Hexadecimal color specification
brewer.pal(n = 9, name = 'YlOrRd')
# Set colour palette
pal2 <- colorNumeric(c("#1A1A1A", "#FD8D3C", "#FED976", "#FFEDA0", "#FFFFCC"), values(nightlights.raster.processed),
na.color = "transparent")
# Create an interactive leaflet map
map_night <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(nightlights.raster.processed,  colors = pal2, opacity=0.9)%>%
addLegend(pal = pal2, values = values(nightlights.raster.processed), title = "Nightlights intensity")
# Let's have a look
map_night
# Save map as widget
saveWidget(map_night, file="html widgets/BGD_nightlights.html")
library(raster)
r <- raster(ncol=10, nrow = 10, xmx=-116,xmn=-126,ymn=42,ymx=46)
r
r[] <- runif(n=ncell(r))
r
plot(r)
#| echo: true
#| output: false
# Set working directory - this is the base folder where we keep all the sub-folders with geo-spatial data organised by source.
setwd("C:/Users/idabr/OneDrive - Oxford Policy Management Limited/EMDI SAE/Geo-spatial Bangladesh data/")
# 1. Base layer #
# Load the WordPop Administrative Level 0 mastergrid base layer for Bangladesh
base.layer <- 'Base layers/bgd_level0_100m_2000_2020.tif'
base.layer.raster=raster(base.layer)
# 2. Shapefile with boundaries of zones #
# Load the Shapefile with administrative level 3 (upazila in Bangladesh)
shapefile.zonal <- readOGR("Base layers/admin 3 level/bgd_admbnda_adm3_bbs_20201113.shp")
# Load the shapefile in a format that's nicer for plotting
shapefile.zone.plot <- st_read("Base layers/admin 3 level/bgd_admbnda_adm3_bbs_20201113.shp")
# 3. Malaria Atlas accessibility datasets #
#Make a list of all TIFF files from the Malaria Atlas Project and import those into a list
matlas.list <- list.files(path="Travel time - Malaria Atlas Project", pattern =".tiff", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
matlas.rasters <- lapply(matlas.list, raster)
# 4. Demographic maps from Meta #
# Pull all TIFF files from Meta with demographic maps
fb.list <- list.files(path="Demographic maps Facebook/", pattern =".tif", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
fb.rasters <- lapply(fb.list, raster)
# 5. Nightlights Data #
# Import geoTIFF file on nightlights intensity
nightlights <- 'Nightlights data/SVDNB_npp_20150101-20151231_75N060E_vcm-orm_v10_c201701311200.avg_rade9.tif'
# Turn into a raster
nightlights.raster = raster(nightlights)
# 6. Pre-harmonised World Pop datasets #
# Make a list of all TIFF files from WorldPop and import those into a list
worldpop.list <- list.files(path="World Pop Harmonised Datasets", pattern =".tif", full.names=TRUE)
# Turn all files into a raster and make a list of rasters
worldpop.rasters <- lapply(worldpop.list, raster)
# Check attributes associated with the base layer
base.layer.raster
# Plot raster
plot(base.layer.raster, box=F, axes=F,legend=F, main = "Bangladesh base layer")
# Inspect the sf multipolygon object with admin 3 boundaries
shapefile.zone.plot
# Inspect the sp SpatialPolygonsDataFrame object with admin 3 boundaries
shapefile.zonal
# Plot the shape file - this shows the zones for which we will estimate poverty
ggplot() +
geom_sf(data = shapefile.zone.plot, size = 3, color = "black", fill = "cyan1") +
ggtitle("Administrative Level 3 Bangladesh") +
coord_sf() + theme_minimal()
png(filename="maps/BGD_pop_density_youth.png", res=400, width=2000, height=1500)
plot(fblist.processed[[7]], box=F, axes=F, main = "Bangladesh - Population density (youth 15-24)")
dev.off()
plot(fblist.processed[[1]], box=F, axes=F, main = "Bangladesh - Population density (children under 5)")
plot(fblist.processed[[2]], box=F, axes=F, main = "Bangladesh - Population density (elderly 60+)")
plot(fblist.processed[[3]], box=F, axes=F, main = "Bangladesh - Population density (general)")
plot(fblist.processed[[4]], box=F, axes=F, main = "Bangladesh - Population density (men)")
plot(fblist.processed[[5]], box=F, axes=F, main = "Bangladesh - Population density (women)")
plot(fblist.processed[[6]], box=F, axes=F, main = "Bangladesh - Population density (women of reproductive age 15-49)")
plot(fblist.processed[[7]], box=F, axes=F, main = "Bangladesh - Population density (youth 15-24)")
# See that all the files have loaded
worldpop.rasters
# Check they match the base layer
base.layer.raster
#Plot examples of WorldPop datasets
plot(worldpop.rasters[[11]], box = F, axes = F, main = "Distance to the closest road Bangladesh", col=viridis(50))
save(upazila, file = "BGD.zonal.stats.RData")
rm(map_night2)
BGD.zonal.stats <- exact_extract(raster.stack, shapefile.zone.plot, c('min', 'max', 'mean', 'sum', 'stdev', 'count'), stack_apply=TRUE, append_cols="ADM3_PCODE")
# Save zonal stats as an RData file
save(BGD.zonal.stats, file = "BGD.zonal.stats.RData")
